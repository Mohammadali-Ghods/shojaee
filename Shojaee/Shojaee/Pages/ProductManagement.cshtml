@page "/ProductManagement"
@model Shojaee.Pages.ProductManagementModel
@{
    Layout = "_Layout.cshtml";
    var queryCatId = Request.Query["categoryid"].ToString();
    var selectedCategoryId = string.IsNullOrEmpty(queryCatId) ? "0" : queryCatId;
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic&display=swap" />
<style>
    body, input, button, textarea, select {
        font-family: 'Noto Sans Arabic', sans-serif !important;
        direction: rtl;
    }

    .category-card {
        cursor: pointer;
    }

        .category-card:hover {
        }

    .subcategories-container {
        margin-right: 20px;
        border-right: 2px dashed #ddd;
        padding-right: 10px;
    }

    .product-card .card-body {
        direction: rtl;
        text-align: right;
    }

    .avatar img {
        object-fit: cover;
    }

    .image-thumb {
        width: 80px;
        height: 80px;
        border-radius: 6px;
        object-fit: cover;
        margin-right: 5px;
        position: relative;
    }

        .image-thumb + button {
            position: absolute;
            top: 0;
            right: 0;
            padding: 0 6px;
            background: rgba(255, 0, 0, 0.7);
            border: none;
            color: white;
            border-radius: 0 6px 0 6px;
            cursor: pointer;
            font-size: 14px;
            line-height: 1;
        }

    .image-container {
        position: relative;
        display: inline-block;
        margin: 2px;
    }

    .product-spec-group {
        border: 1px solid #ddd;
        padding: 10px;
        margin-top: 10px;
        border-radius: 6px;
    }

    .product-spec {
        border-top: 1px solid #eee;
        padding: 5px 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .product-spec img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            margin-left: 10px;
            border-radius: 4px;
        }
    /* اسکرول تمیز و زیبا برای مدال بزرگ محصول */
    #addProductModal .modal-dialog {
        max-width: 1000px;
        max-height: 90vh;
    }

    #addProductModal .modal-content {
        height: 90vh;
        overflow-y: auto;
    }
    /* بخش قیمت‌دهی ترکیب مشخصات */
    #priceListContainer {
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 10px;
        max-height: 300px;
        overflow-y: auto;
        margin-top: 15px;
    }

        #priceListContainer table {
            width: 100%;
        }

        #priceListContainer th, #priceListContainer td {
            padding: 5px;
            border-bottom: 1px solid #ccc;
            font-size: 14px;
        }

    .spec-select {
        min-width: 150px;
    }
</style>
<main class="adminuiux-content has-sidebar">
    <div class="container mt-4" id="main-content">
        <div class="row">
            <div class="col-12 mb-4 d-flex align-items-center justify-content-between">
                <h5>مدیریت دسته‌بندی محصولات</h5>
                <button class="btn btn-primary" id="btnAddRootCategory">افزودن دسته جدید</button>
            </div>
            <div class="col-12" id="categoryBoxContainer"></div>
            <hr class="my-4" />
            <div class="col-12 d-flex justify-content-between align-items-center mb-3">
                <h5>محصولات دسته: <span id="selectedCategoryTitle">@((selectedCategoryId == "0") ? "هیچ دسته انتخاب نشده" : "")</span></h5>
                <button class="btn btn-success" id="btnAddProduct">افزودن محصول جدید</button>
            </div>
            <div class="col-12" id="productBoxContainer"></div>
        </div>
    </div>
</main>
<!-- مدال افزودن/ویرایش دسته -->
<div id="addCategoryModal" class="modal fade" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form id="categoryForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCategoryModalLabel">افزودن دسته‌بندی</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="categoryEditId" />
                <input type="hidden" id="categoryEditParentId" />
                <div class="mb-3">
                    <label for="categoryTitleInput" class="form-label">عنوان دسته</label>
                    <input type="text" class="form-control" id="categoryTitleInput" required />
                </div>
                <div class="mb-3">
                    <label for="categoryDescriptionInput" class="form-label">توضیحات</label>
<textarea class="form-control" id="categoryDescriptionInput" rows="2"></textarea>
                </div>
                <div class="mb-3">
                    <label for="categoryImageInput" class="form-label">عکس دسته</label>
                    <input type="file" id="categoryImageInput" accept="image/*" class="form-control" />
                    <div id="categoryImagePreview" class="mt-2"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="submit" class="btn btn-success" id="saveCategoryBtn">ذخیره دسته</button>
            </div>
        </form>
    </div>
</div>
<!-- مدال افزودن/ویرایش محصول -->
<div id="addProductModal" class="modal fade" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <form id="productForm" class="modal-content" autocomplete="off">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">افزودن محصول</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="productEditId" />
                <input type="hidden" id="productCategoryId" />
                <div class="mb-3">
                    <label for="productNameInput" class="form-label">نام محصول</label>
                    <input type="text" id="productNameInput" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label for="productBriefInput" class="form-label">توضیح کوتاه</label>
<textarea id="productBriefInput" class="form-control" rows="2"></textarea>
                </div>
                <div class="mb-3">
                    <label for="productDescriptionInput" class="form-label">توضیحات کامل</label>
<textarea id="productDescriptionInput" class="form-control" rows="6"></textarea>
                </div>
                <div class="mb-3">
                    <label for="productImagesInput" class="form-label">آپلود عکس‌ها</label>
                    <input type="file" id="productImagesInput" accept="image/*" multiple class="form-control" />
                    <div id="productImagePreviewList" class="d-flex flex-wrap gap-2 mt-2"></div>
                </div>
                <!-- بخش contentParts -->
                <div id="contentPartsContainer" class="mb-3">
                    <label class="form-label">محتوای محصول</label>
                  
                    <div id="contentPartsList"></div>
                </div>
                <!-- بخش گروه‌های مشخصات محصول -->
                <div id="specGroupsContainer" class="mb-3">
                    <label class="form-label">گروه‌های مشخصات محصول</label>
                   
                    <div id="specGroupsList"></div>
                </div>
                <!-- بخش قیمت دهی ترکیب مشخصات -->
                <div id="priceListContainer" class="mb-3">
                    <label class="form-label">قیمت دهی ترکیب مشخصات</label>
                    <button type="button" class="btn btn-sm btn-outline-primary mb-2" id="btnAddPriceCombination">افزودن ترکیب جدید</button>
                    <table class="table table-sm">
                        <thead>
                            <tr id="priceTableHeader">
                                <!-- ستون‌هایی که با گروه‌ها اضافه می‌شوند -->
                            </tr>
                        </thead>
                        <tbody id="priceTableBody">
                            <!-- ردیف‌های قیمت -->
                        </tbody>
                    </table>
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="productIsPopular" />
                    <label class="form-check-label" for="productIsPopular">محبوب</label>
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="productIsNew" />
                    <label class="form-check-label" for="productIsNew">جدید</label>
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="productIsActive" checked />
                    <label class="form-check-label" for="productIsActive">فعال</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="submit" class="btn btn-success" id="saveProductBtn">ذخیره محصول</button>
            </div>
        </form>
    </div>
</div>
<div id="specGroupEditModal" class="modal fade" tabindex="-1" aria-labelledby="specGroupEditModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <form id="specGroupEditForm" class="modal-content" autocomplete="off">
            <div class="modal-header">
                <h5 class="modal-title" id="specGroupEditModalLabel">گروه مشخصات محصول</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="specGroupEditIndex" />
                <div class="mb-3">
                    <label for="specGroupTitleInput" class="form-label">عنوان گروه</label>
                    <input type="text" id="specGroupTitleInput" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label for="specGroupDescInput" class="form-label">توضیحات گروه</label>
<textarea id="specGroupDescInput" class="form-control" rows="2"></textarea>
                </div>
                <div class="mb-3">
                    <label for="specGroupImageInput" class="form-label">عکس گروه</label>
                    <input type="file" id="specGroupImageInput" accept="image/*" class="form-control" />
                    <div id="specGroupImagePreview" class="mt-2"></div>
                </div>
                <hr />
                <h6>مشخصه‌ها</h6>
                <button type="button" class="btn btn-sm btn-outline-primary mb-2" id="btnAddSpec">افزودن مشخصه</button>
                <table class="table table-sm table-striped" id="specsTable">
                    <thead>
                        <tr>
                            <th>مشخصه</th>
                            <th>عکس مشخصه</th>
                            <th>عملیات</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- ردیفهای مشخصه اضافه می‌شود -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="submit" class="btn btn-success">ذخیره گروه</button>
            </div>
        </form>
    </div>
</div>
<!-- مدال مدیریت محتوای محصول (ویرایش/افزودن) -->
<div id="contentPartEditModal" class="modal fade" tabindex="-1" aria-labelledby="contentPartEditModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form id="contentPartEditForm" class="modal-content" autocomplete="off">
            <div class="modal-header">
                <h5 class="modal-title" id="contentPartEditModalLabel">محتوای محصول</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="contentPartEditIndex" />
                <div class="mb-3">
                    <label for="contentPartTitleInput" class="form-label">عنوان محتوا</label>
                    <input type="text" id="contentPartTitleInput" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label for="contentPartDescInput" class="form-label">توضیحات محتوا</label>
<textarea id="contentPartDescInput" class="form-control" rows="4"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="submit" class="btn btn-success">ذخیره محتوا</button>
            </div>
        </form>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>

    function getCookieValue(cookieName) {
    const cookies = document.cookie.split(';');
    for (const cookie of cookies) {
    const c = cookie.trim();
    if (c.startsWith(cookieName + '=')) {
    return c.substring(cookieName.length + 1);
    }
    }
    return '';
    }
    function redirectToLogin() {
    window.location.href = '/Login';
    }
    const token = getCookieValue('token');
    if (!token) redirectToLogin();
    let currentCategoryId = '@selectedCategoryId';
    let categoriesCache = {};
    let productImages = [];
    // المان ها
    const categoryBoxContainer = document.getElementById('categoryBoxContainer');
    const productBoxContainer = document.getElementById('productBoxContainer');
    const selectedCategoryTitleElem = document.getElementById('selectedCategoryTitle');
    const btnAddProduct = document.getElementById('btnAddProduct');
    const categoryModal = new bootstrap.Modal(document.getElementById('addCategoryModal'));
    const productModal = new bootstrap.Modal(document.getElementById('addProductModal'));
    const categoryForm = document.getElementById('categoryForm');
    const categoryTitleInput = document.getElementById('categoryTitleInput');
    const categoryDescriptionInput = document.getElementById('categoryDescriptionInput');
    const categoryImageInput = document.getElementById('categoryImageInput');
    const categoryImagePreview = document.getElementById('categoryImagePreview');
    const categoryEditIdInput = document.getElementById('categoryEditId');
    const categoryEditParentIdInput = document.getElementById('categoryEditParentId');
    const productForm = document.getElementById('productForm');
    const productEditIdInput = document.getElementById('productEditId');
    const productCategoryIdInput = document.getElementById('productCategoryId');
    const productNameInput = document.getElementById('productNameInput');
    const productBriefInput = document.getElementById('productBriefInput');
    const productDescriptionInput = document.getElementById('productDescriptionInput');
    const productImagesInput = document.getElementById('productImagesInput');
    const productImagePreviewList = document.getElementById('productImagePreviewList');
    const productIsPopularCheckbox = document.getElementById('productIsPopular');
    const productIsNewCheckbox = document.getElementById('productIsNew');
    const productIsActiveCheckbox = document.getElementById('productIsActive');
    const addCategoryModalLabel = document.getElementById('addCategoryModalLabel');
    const addProductModalLabel = document.getElementById('addProductModalLabel');
    // بخش جدید مدیریت گروه مشخصات و محتوای محصول
    const specGroupsList = document.getElementById('specGroupsList');
    const contentPartsList = document.getElementById('contentPartsList');
    // المان های جدید قیمت دهی ترکیب مشخصات
    const priceListContainer = document.getElementById('priceListContainer');
    const priceTableHeader = document.getElementById('priceTableHeader');
    const priceTableBody = document.getElementById('priceTableBody');
    const btnAddPriceCombination = document.getElementById('btnAddPriceCombination');
    async function fetchWithAuth(url, options = {}) {
    options.headers = options.headers || {};
    options.headers['Authorization'] = 'Bearer ' + token;
    const response = await fetch(url, options);
    if(response.status === 401 || response.status === 403) {
    redirectToLogin();
    return null;
    }
    return response;
    }
    // --- دسته بندی ---
    async function loadCategories(parentId) {
    if(categoriesCache[parentId]) {
    renderCategories(parentId, categoriesCache[parentId]);
    return;
    }
    try {
    const response = await fetchWithAuth(`/GetCategories?catId=${encodeURIComponent(parentId)}`);
    if(!response) return;
    if(!response.ok) throw new Error("خطا در دریافت دسته‌ها");
    const data = await response.json();
    const camelCaseData = data.map(c => ({
    id: c.id, title: c.title, description: c.description,
    imageAddress: c.imageAddress, parentCategory: c.parentCategory
    }));
    categoriesCache[parentId] = camelCaseData;
    renderCategories(parentId, camelCaseData);
    } catch(err) { alert(err.message);}
    }
    function renderCategories(parentId, categories) {
    if(parentId === "0") {
    categoryBoxContainer.innerHTML = "";
    categories.forEach(cat => {
    const card = createCategoryCard(cat);
    categoryBoxContainer.appendChild(card);
    loadAndRenderSubCategories(cat.id, card);
    });
    } else {
    const parentCard = document.querySelector(`[data-categoryid="${parentId}"]`);
    if(!parentCard) return;
    let subDiv = parentCard.querySelector('.subcategories-container');
    if(!subDiv) {
    subDiv = document.createElement('div');
    subDiv.classList.add('subcategories-container', 'mt-2');
    parentCard.appendChild(subDiv);
    }
    subDiv.innerHTML = "";
    categories.forEach(cat => {
    const card = createCategoryCard(cat);
    subDiv.appendChild(card);
    loadAndRenderSubCategories(cat.id, card);
    });
    }
    }
    async function loadAndRenderSubCategories(catId, parentCardElement) {
    try {
    const response = await fetchWithAuth(`/GetCategories?catId=${encodeURIComponent(catId)}`);
    if(!response) return;
    if(!response.ok) throw new Error("خطا در دریافت زیر دسته‌ها");
    const data = await response.json();
    if(!data || data.length === 0) return;
    const camelCaseData = data.map(c => ({
    id: c.id, title: c.title, description: c.description,
    imageAddress: c.imageAddress, parentCategory: c.parentCategory
    }));
    let subDiv = parentCardElement.querySelector('.subcategories-container');
    if(!subDiv) {
    subDiv = document.createElement('div');
    subDiv.classList.add('subcategories-container', 'mt-2');
    parentCardElement.appendChild(subDiv);
    }
    subDiv.innerHTML = "";
    camelCaseData.forEach(cat => {
    const card = createCategoryCard(cat);
    subDiv.appendChild(card);
    });
    } catch(err){console.error(err);}
    }
    function createCategoryCard(category) {
    const card = document.createElement('div');
    card.className = "card adminuiux-card mb-3 category-card";
    card.dataset.categoryid = category.id;
    const cardBody = document.createElement('div');
    cardBody.className = "card-body";
    cardBody.style.userSelect = "none";
    card.addEventListener('click', async e => {
    e.stopPropagation();
    await onSelectCategory(category);
    });
    const row = document.createElement('div');
    row.className = "row align-items-center";
    const colLeft = document.createElement('div');
    colLeft.className = "col-12 col-sm-9 col-xxl mb-3 mb-xxl-0";
    const rowLeft = document.createElement('div');
    rowLeft.className = "row align-items-center";
    const colAvatar = document.createElement('div');
    colAvatar.className = "col-auto";
    const avatarDiv = document.createElement('div');
    avatarDiv.className = "avatar avatar-60 rounded";
    const avatarImg = document.createElement('img');
    avatarImg.alt = "Category Image";
    avatarImg.style.width = "60px";
    avatarImg.style.height = "60px";
    avatarImg.src = category.imageAddress && category.imageAddress !== "" ? category.imageAddress : "https://cdn-icons-png.flaticon.com/512/9592/9592995.png";
    avatarDiv.appendChild(avatarImg);
    colAvatar.appendChild(avatarDiv);
    const colInfo = document.createElement('div');
    colInfo.className = "col";
    const title = document.createElement('h5');
    title.textContent = category.title || "بدون عنوان";
    colInfo.appendChild(title);
    rowLeft.appendChild(colAvatar);
    rowLeft.appendChild(colInfo);
    colLeft.appendChild(rowLeft);
    const colRight = document.createElement('div');
    colRight.className = "col-auto d-flex gap-2";
    const btnAddSubCategory = document.createElement('button');
    btnAddSubCategory.className = "btn btn-outline-secondary";
    btnAddSubCategory.textContent = "افزودن زیر دسته";
    btnAddSubCategory.addEventListener('click', e => {
    e.stopPropagation();
    openCategoryModal("", category.id, "");
    });
    colRight.appendChild(btnAddSubCategory);
    const btnEditCategory = document.createElement('button');
    btnEditCategory.className = "btn btn-outline-warning";
    btnEditCategory.textContent = "ویرایش دسته";
    btnEditCategory.addEventListener('click', e => {
    e.stopPropagation();
    openCategoryModal(category.title, category.parentCategory, category.id, category.description, category.imageAddress);
    });
    colRight.appendChild(btnEditCategory);
    const btnRemoveCategory = document.createElement('button');
    btnRemoveCategory.className = "btn btn-outline-danger";
    btnRemoveCategory.textContent = "حذف دسته";
    btnRemoveCategory.addEventListener('click', async e => {
    e.stopPropagation();
    if (!confirm(`آیا از حذف دسته "${category.title}" مطمئن هستید؟`)) return;
    await deleteCategory(category);
    });
    colRight.appendChild(btnRemoveCategory);
    row.appendChild(colLeft);
    row.appendChild(colRight);
    cardBody.appendChild(row);
    card.appendChild(cardBody);
    return card;
    }
    async function onSelectCategory(category) {
    currentCategoryId = category.id;
    updateQueryString(currentCategoryId);
    selectedCategoryTitleElem.textContent = category.title;
    btnAddProduct.disabled = (currentCategoryId === "0" || !currentCategoryId);
    const subCategories = await fetchSubCategories(currentCategoryId);
    updateSubCategoriesUI(currentCategoryId, subCategories);
    await loadProducts(currentCategoryId);
    }
    async function fetchSubCategories(catId) {
    try {
    const response = await fetchWithAuth(`/GetCategories?catId=${encodeURIComponent(catId)}`);
    if(!response) return [];
    if(!response.ok) throw new Error("خطا در دریافت زیر دسته‌ها");
    const data = await response.json();
    return data.map(c => ({
    id: c.id, title: c.title, description: c.description,
    imageAddress: c.imageAddress, parentCategory: c.parentCategory
    }));
    } catch(err) { alert(err.message); return []; }
    }
    function updateSubCategoriesUI(parentId, subCategories) {
    const parentCard = document.querySelector(`[data-categoryid="${parentId}"]`);
    if(!parentCard) return;
    let subDiv = parentCard.querySelector('.subcategories-container');
    if(!subDiv) {
    subDiv = document.createElement('div');
    subDiv.classList.add('subcategories-container', 'mt-2');
    parentCard.appendChild(subDiv);
    }
    subDiv.innerHTML = "";
    if(subCategories.length === 0) {
    subDiv.style.display = 'none';
    return;
    }
    subCategories.forEach(cat => {
    const card = createCategoryCard(cat);
    subDiv.appendChild(card);
    });
    subDiv.style.display = 'block';
    }
    function updateQueryString(catId) {
    const url = new URL(window.location);
    url.searchParams.set('categoryid', catId);
    window.history.replaceState({}, '', url);
    }
    // --- محصولات ---
    async function loadProducts(catId) {
    try {
    productBoxContainer.innerHTML = `<p>در حال بارگذاری محصولات...</p>`;
    const response = await fetchWithAuth(`/GetCategoryProducts?categoryId=${encodeURIComponent(catId)}&pageSize=100&pageNumber=1`);
    if(!response) return;
    if(!response.ok) throw new Error("خطا در دریافت محصولات");
    const data = await response.json();
    const products = data.map(p => ({
    id: p.id,
    productName: p.productName,
    productBrief: p.productBrief,
    productDescription: p.productDescription,
    categoryID: p.categoryID,
    imageAddresses: p.imageAddresses || [],
    isPopular: p.isPopular,
    isNew: p.isNew,
    active: p.active,
    contentParts: p.contentParts || [],
    productSpecificationGroup: p.productSpecificationGroup || [],
    point: p.point,
    commentsCount: p.commentsCount,
    priceLists: p.priceLists || []
    }));
    renderProducts(products);
    } catch(err) {
    alert(err.message);
    productBoxContainer.innerHTML = "";
    }
    }
    function renderProducts(products) {
    productBoxContainer.innerHTML = "";
    if (!products || products.length === 0) {
    productBoxContainer.innerHTML = "<p>محصولی وجود ندارد.</p>";
    return;
    }
    products.forEach(product => {
    const card = document.createElement('div');
    card.className = "card adminuiux-card mb-3 product-card";
    const cardBody = document.createElement('div');
    cardBody.className = "card-body";
    const row = document.createElement('div');
    row.className = "row align-items-center";
    const colLeft = document.createElement('div');
    colLeft.className = "col-12 col-sm-9 col-xxl mb-3 mb-xxl-0";
    const rowLeft = document.createElement('div');
    rowLeft.className = "row align-items-center";
    const colAvatar = document.createElement('div');
    colAvatar.className = "col-auto";
    const avatarDiv = document.createElement('div');
    avatarDiv.className = "avatar avatar-60 rounded";
    const avatarImg = document.createElement('img');
    avatarImg.src = (product.imageAddresses && product.imageAddresses.length > 0) ? product.imageAddresses[0] : 'https://cdn-icons-png.flaticon.com/512/4272/4272773.png';
    avatarImg.alt = "Product Image";
    avatarImg.style.width = "60px";
    avatarImg.style.height = "60px";
    avatarDiv.appendChild(avatarImg);
    colAvatar.appendChild(avatarDiv);
    const colInfo = document.createElement('div');
    colInfo.className = "col";
    const nameTitle = document.createElement('h5');
    nameTitle.textContent = product.productName || "بدون نام";
    const briefText = document.createElement('p');
    briefText.textContent = product.productBrief || "";
    const extraInfo = document.createElement('small');
    extraInfo.className = 'text-muted d-block mt-1';
    extraInfo.textContent = `امتیاز: ${product.point?.toFixed(2) || 0} - تعداد نظرات: ${product.commentsCount || 0} - وضعیت: ${product.active ? "فعال" : "غیرفعال"}`;
    colInfo.appendChild(nameTitle);
    colInfo.appendChild(briefText);
    colInfo.appendChild(extraInfo);
    rowLeft.appendChild(colAvatar);
    rowLeft.appendChild(colInfo);
    colLeft.appendChild(rowLeft);
    const colRight = document.createElement('div');
    colRight.className = "col-auto d-flex gap-2 flex-wrap";
    const btnEdit = document.createElement('button');
    btnEdit.className = "btn btn-outline-theme";
    btnEdit.textContent = "ویرایش محصول";
    btnEdit.onclick = () => openProductModal(product);
    const btnRemove = document.createElement('button');
    btnRemove.className = "btn btn-outline-danger";
    btnRemove.textContent = "حذف محصول";
    btnRemove.onclick = async () => {
    if (!confirm(`آیا از حذف محصول "${product.productName}" مطمئن هستید؟`)) return;
    await deleteProduct(product);
    };
    colRight.appendChild(btnEdit);
    colRight.appendChild(btnRemove);
    row.appendChild(colLeft);
    row.appendChild(colRight);
    cardBody.appendChild(row);
    card.appendChild(cardBody);
    productBoxContainer.appendChild(card);
    });
    }
    // === مدیریت مدال دسته ===
    function openCategoryModal(title = "", parentId = "0", id = "", description = "", imageAddress = "") {
    categoryEditIdInput.value = id;
    categoryEditParentIdInput.value = parentId;
    categoryTitleInput.value = title;
    categoryDescriptionInput.value = description;
    categoryImageInput.value = "";
    categoryImageInput._uploadedUrl = "";
    categoryImagePreview.innerHTML = "";
    if (imageAddress && imageAddress.trim() !== "") {
    const img = document.createElement('img');
    img.src = imageAddress;
    img.alt = "عکس دسته";
    img.style.maxWidth = "100%";
    img.style.borderRadius = "6px";
    img.style.maxHeight = "150px";
    categoryImagePreview.appendChild(img);
    categoryImageInput._uploadedUrl = imageAddress;
    }
    addCategoryModalLabel.textContent = id ? "ویرایش دسته" : "افزودن دسته";
    categoryModal.show();
    }
    categoryImageInput.addEventListener('change', async () => {
    const file = categoryImageInput.files[0];
    if (!file) return;
    categoryImagePreview.innerHTML = "<p>در حال آپلود عکس...</p>";
    const url = await uploadFile(file);
    if (url) {
    categoryImagePreview.innerHTML = "";
    const img = document.createElement('img');
    img.src = url;
    img.alt = "عکس دسته";
    img.style.maxWidth = "100%";
    img.style.borderRadius = "6px";
    img.style.maxHeight = "150px";
    categoryImagePreview.appendChild(img);
    categoryImageInput._uploadedUrl = url;
    } else {
    categoryImagePreview.innerHTML = "<p class='text-danger'>خطای آپلود تصویر</p>";
    }
    });
    categoryForm.addEventListener('submit', async e => {
    e.preventDefault();
    const id = categoryEditIdInput.value;
    const parentId = categoryEditParentIdInput.value;
    const title = categoryTitleInput.value.trim();
    const description = categoryDescriptionInput.value.trim();
    const uploadedImageUrl = categoryImageInput._uploadedUrl || "";
    if (!title) { alert("عنوان دسته را وارد کنید"); return; }
    const categoryObj = {
    title: title,
    parentCategory: parentId,
    description: description || undefined,
    imageAddress: uploadedImageUrl || undefined,
    };
    let url = "";
    if (!id || id === "") {
    url = "AddCategory";
    } else {
    url = "EditCategory";
    categoryObj.id = id;
    }
    try {
    const res = await fetch(url, {
    method: "POST",
    headers: {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
    },
    body: JSON.stringify(categoryObj)
    });
    if (res.status === 401 || res.status === 403) {
    redirectToLogin();
    return;
    }
    if (!res.ok) throw new Error("خطا در ذخیره دسته");
    await res.json();
    categoryModal.hide();
    categoriesCache = {};
    await loadCategories("0");
    if (currentCategoryId !== "0") {
    await loadCategories(currentCategoryId);
    await loadProducts(currentCategoryId);
    }
    } catch (err) { alert(err.message);}
    });
    async function deleteCategory(category) {
    try {
    const res = await fetch('RemoveCategory', {
    method: "POST",
    headers: {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
    },
    body: JSON.stringify({ id: category.id })
    });
    if (res.status === 401 || res.status === 403) {
    redirectToLogin();
    return;
    }
    if (!res.ok) throw new Error("خطا در حذف دسته");
    categoriesCache = {};
    await loadCategories("0");
    if (category.id === currentCategoryId) {
    currentCategoryId = "0";
    selectedCategoryTitleElem.textContent = "هیچ دسته انتخاب نشده";
    btnAddProduct.disabled = true;
    productBoxContainer.innerHTML = "";
    updateQueryString("0");
    }
    } catch (err) { alert(err.message);}
    }
    // === مدیریت مدال محصول ===
    // داده‌های داخلی مدیریت گروه مشخصات و محتوا
    let specGroupsData = [];
    let contentPartsData = [];
    // مدال مشخصات جدید و محتوای جدید (مطابق مدال‌هایی که خودتان اضافه کردید)
    const specGroupEditModalEl = document.getElementById('specGroupEditModal');
    const specGroupEditModal = new bootstrap.Modal(specGroupEditModalEl);
    const specGroupEditForm = document.getElementById('specGroupEditForm');
    const specGroupEditIndexInput = document.getElementById('specGroupEditIndex');
    const specGroupTitleInput = document.getElementById('specGroupTitleInput');
    const specGroupDescInput = document.getElementById('specGroupDescInput');
    const specGroupImageInput = document.getElementById('specGroupImageInput');
    const specGroupImagePreview = document.getElementById('specGroupImagePreview');
    const specsTableBody = document.querySelector('#specsTable tbody');
    const btnAddSpec = document.getElementById('btnAddSpec');
    let currentSpecGroupImageUploadedUrl = "";
    let currentSpecImgsUploadedUrls = {};
    // توابع مدیریت لیست گروه مشخصات در مدال اصلی محصول
    function renderSpecGroupsList() {
    specGroupsList.innerHTML = "";
    if(specGroupsData.length === 0){
    specGroupsList.innerHTML = "<p>گروهی وجود ندارد.</p>";
    const addBtn = document.createElement('button');
    addBtn.type = "button";
    addBtn.className = "btn btn-sm btn-outline-success mt-2";
    addBtn.textContent = "افزودن گروه جدید";
    addBtn.onclick = () => openSpecGroupEditModal(-1);
    specGroupsList.appendChild(addBtn);
    return;
    }
    const table = document.createElement('table');
    table.className = "table table-sm table-bordered";
    const thead = document.createElement('thead');
    thead.innerHTML = `<tr><th>عنوان گروه</th><th>توضیحات</th><th>عملیات</th></tr>`;
    table.appendChild(thead);
    const tbody = document.createElement('tbody');
    specGroupsData.forEach((group, index) => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
    <td>${group.title || ""}</td>
    <td>${group.description || ""}</td>
    <td>
    <button type="button" class="btn btn-sm btn-outline-primary btnEditSpecGroup" data-index="${index}">ویرایش</button>
    <button type="button" class="btn btn-sm btn-outline-danger btnRemoveSpecGroup" data-index="${index}">حذف</button>
    </td>`;
    tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    specGroupsList.appendChild(table);
    const addBtn = document.createElement('button');
    addBtn.type = "button";
    addBtn.className = "btn btn-sm btn-outline-success mt-2";
    addBtn.textContent = "افزودن گروه جدید";
    addBtn.onclick = () => openSpecGroupEditModal(-1);
    specGroupsList.appendChild(addBtn);
    tbody.querySelectorAll('.btnEditSpecGroup').forEach(btn => {
    btn.addEventListener('click', e => {
    let idx = parseInt(e.target.dataset.index);
    openSpecGroupEditModal(idx);
    });
    });
    tbody.querySelectorAll('.btnRemoveSpecGroup').forEach(btn => {
    btn.addEventListener('click', e => {
    let idx = parseInt(e.target.dataset.index);
    if(confirm("آیا مطمئن به حذف این گروه مشخصات هستید؟")){
    specGroupsData.splice(idx,1);
    renderSpecGroupsList();
    initializePriceTable();
    }
    });
    });
    }
    // توابع مدیریت محتوای محصول در مدال اصلی
    function renderContentPartsList() {
    contentPartsList.innerHTML = "";
    if(contentPartsData.length === 0){
    contentPartsList.innerHTML = "<p>محتوایی وجود ندارد.</p>";
    const addBtn = document.createElement('button');
    addBtn.type = 'button';
    addBtn.className = 'btn btn-sm btn-outline-success mt-2';
    addBtn.textContent = "افزودن محتوا";
    addBtn.onclick = () => openContentPartEditModal(-1);
    contentPartsList.appendChild(addBtn);
    return;
    }
    const table = document.createElement('table');
    table.className = "table table-sm table-bordered";
    const thead = document.createElement('thead');
    thead.innerHTML = `<tr><th>عنوان محتوا</th><th>توضیحات</th><th>عملیات</th></tr>`;
    table.appendChild(thead);
    const tbody = document.createElement('tbody');
    contentPartsData.forEach((part, idx) => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
    <td>${part.title || ""}</td>
    <td>${part.description || ""}</td>
    <td>
    <button type="button" class="btn btn-sm btn-outline-primary btnEditContentPart" data-index="${idx}">ویرایش</button>
    <button type="button" class="btn btn-sm btn-outline-danger btnRemoveContentPart" data-index="${idx}">حذف</button>
    </td>`;
    tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    contentPartsList.appendChild(table);
    const addBtn = document.createElement('button');
    addBtn.type = 'button';
    addBtn.className = 'btn btn-sm btn-outline-success mt-2';
    addBtn.textContent = "افزودن محتوا";
    addBtn.onclick = () => openContentPartEditModal(-1);
    contentPartsList.appendChild(addBtn);
    tbody.querySelectorAll('.btnEditContentPart').forEach(btn => {
    btn.addEventListener('click', e => {
    let idx = parseInt(e.target.dataset.index);
    openContentPartEditModal(idx);
    });
    });
    tbody.querySelectorAll('.btnRemoveContentPart').forEach(btn => {
    btn.addEventListener('click', e => {
    let idx = parseInt(e.target.dataset.index);
    if(confirm("آیا مطمئن به حذف این محتوا هستید؟")){
    contentPartsData.splice(idx,1);
    renderContentPartsList();
    }
    });
    });
    }
    // باز کردن مدال گروه مشخصات و مدیریت آدرس عکس‌ها و مشخصات
    function resetSpecGroupEditModal() {
    specGroupEditForm.reset();
    specGroupImagePreview.innerHTML = "";
    currentSpecGroupImageUploadedUrl = "";
    currentSpecImgsUploadedUrls = {};
    specsTableBody.innerHTML="";
    }
    function openSpecGroupEditModal(index) {
    resetSpecGroupEditModal();
    specGroupEditIndexInput.value = index;
    if(index >= 0){
    const group = specGroupsData[index];
    specGroupTitleInput.value = group.title || "";
    specGroupDescInput.value = group.description || "";
    currentSpecGroupImageUploadedUrl = group.imageAddress || "";
    if(currentSpecGroupImageUploadedUrl){
    let img = document.createElement('img');
    img.src = currentSpecGroupImageUploadedUrl;
    img.style.maxWidth = '150px';
    img.style.borderRadius = '6px';
    specGroupImagePreview.appendChild(img);
    }
    specsTableBody.innerHTML = "";
    if(Array.isArray(group.productSpecifications)){
    group.productSpecifications.forEach((spec,i) => {
    addSpecRow(spec.specification || "", spec.imageAddress || "");
    });
    }
    } else {
    addSpecRow();
    }
    specGroupEditModal.show();
    }
    // افزودن ردیف مشخصه داخل مدال گروه
    function addSpecRow(specTitle = "", specImageUrl = "") {
    const tr = document.createElement('tr');
    tr.innerHTML = `
    <td>
    <input type="text" class="form-control form-control-sm specTitleInput" required value="${specTitle.replace(/"/g, "&quot;")}" />
    </td>
    <td>
    <input type="file" accept="image/*" class="form-control form-control-sm specImageInput" />
    <div class="specImagePreview mt-1"></div>
    </td>
    <td>
    <button type="button" class="btn btn-sm btn-danger btnRemoveSpecRow">حذف</button>
    </td>
    `;
    specsTableBody.appendChild(tr);
    const previewDiv = tr.querySelector('.specImagePreview');
    if(specImageUrl){
    let img = document.createElement('img');
    img.src = specImageUrl;
    img.style.maxWidth = '80px';
    img.style.borderRadius = '6px';
    previewDiv.appendChild(img);
    const idx = Array.from(specsTableBody.children).indexOf(tr);
    currentSpecImgsUploadedUrls[idx] = specImageUrl;
    }
    const fileInput = tr.querySelector('.specImageInput');
    fileInput.addEventListener('change', async () => {
    const file = fileInput.files[0];
    if(!file) return;
    previewDiv.innerHTML = "در حال آپلود...";
    const url = await uploadFile(file);
    previewDiv.innerHTML = "";
    if(url){
    const img = document.createElement('img');
    img.src = url;
    img.style.maxWidth = '80px';
    img.style.borderRadius = '6px';
    previewDiv.appendChild(img);
    const idx = Array.from(specsTableBody.children).indexOf(tr);
    currentSpecImgsUploadedUrls[idx] = url;
    } else {
    previewDiv.textContent = "خطا در آپلود";
    const idx = Array.from(specsTableBody.children).indexOf(tr);
    delete currentSpecImgsUploadedUrls[idx];
    }
    });
    const removeBtn = tr.querySelector('.btnRemoveSpecRow');
    removeBtn.addEventListener('click', () => {
    tr.remove();
    currentSpecImgsUploadedUrls = {};
    specsTableBody.querySelectorAll('tr').forEach((row, i) => {
    const preview = row.querySelector('.specImagePreview img');
    if(preview){
    currentSpecImgsUploadedUrls[i] = preview.src;
    }
    });
    });
    }
    btnAddSpec.addEventListener('click', () => addSpecRow());
    specGroupImageInput.addEventListener('change', async () => {
    let file = specGroupImageInput.files[0];
    if(!file) return;
    specGroupImagePreview.innerHTML = "در حال آپلود...";
    const url = await uploadFile(file);
    specGroupImagePreview.innerHTML = "";
    if(url){
    const img = document.createElement('img');
    img.src = url;
    img.style.maxWidth = '150px';
    img.style.borderRadius = '6px';
    specGroupImagePreview.appendChild(img);
    currentSpecGroupImageUploadedUrl = url;
    } else {
    specGroupImagePreview.textContent = "خطا در آپلود تصویر";
    currentSpecGroupImageUploadedUrl = "";
    }
    });
    specGroupEditForm.addEventListener('submit', e => {
    e.preventDefault();
    const idx = parseInt(specGroupEditIndexInput.value);
    const title = specGroupTitleInput.value.trim();
    if(!title) {
    alert("عنوان گروه را وارد کنید");
    return;
    }
    const description = specGroupDescInput.value.trim();
    let productSpecifications = [];
    specsTableBody.querySelectorAll('tr').forEach((tr,i) => {
    const specTitleInput = tr.querySelector('.specTitleInput');
    let specTitle = specTitleInput.value.trim();
    if(specTitle){
    let specImage = currentSpecImgsUploadedUrls[i] || "";
    productSpecifications.push({specification: specTitle, imageAddress: specImage || undefined});
    }
    });
    if(productSpecifications.length === 0){
    if(!confirm("گروه مشخصات بدون مشخصه است. تایید شود؟") === false) return;
    }
    const groupObj = {
    title,
    description: description || undefined,
    imageAddress: currentSpecGroupImageUploadedUrl || undefined,
    productSpecifications
    };
    if(idx >= 0){
    specGroupsData[idx] = groupObj;
    } else {
    specGroupsData.push(groupObj);
    }
    renderSpecGroupsList();
    initializePriceTable();
    specGroupEditModal.hide();
    });
    // مدیریت مدال محتوای محصول
    const contentPartEditModalEl = document.getElementById('contentPartEditModal');
    const contentPartEditModal = new bootstrap.Modal(contentPartEditModalEl);
    const contentPartEditForm = document.getElementById('contentPartEditForm');
    const contentPartEditIndexInput = document.getElementById('contentPartEditIndex');
    const contentPartTitleInput = document.getElementById('contentPartTitleInput');
    const contentPartDescInput = document.getElementById('contentPartDescInput');
    function openContentPartEditModal(index) {
    contentPartEditIndexInput.value = index;
    if(index >= 0){
    const part = contentPartsData[index];
    contentPartTitleInput.value = part.title || "";
    contentPartDescInput.value = part.description || "";
    } else {
    contentPartEditForm.reset();
    }
    contentPartEditModal.show();
    }
    contentPartEditForm.addEventListener('submit', e => {
    e.preventDefault();
    const idx = parseInt(contentPartEditIndexInput.value);
    const title = contentPartTitleInput.value.trim();
    if(!title){
    alert("عنوان محتوا را وارد کنید");
    return;
    }
    const description = contentPartDescInput.value.trim();
    const partObj = {title, description};
    if(idx >= 0){
    contentPartsData[idx] = partObj;
    } else {
    contentPartsData.push(partObj);
    }
    renderContentPartsList();
    contentPartEditModal.hide();
    });
    // بازنویسی تابع openProductModal با استفاده از داده‌های داخلی
    function openProductModal(product) {
    productEditIdInput.value = product ? product.id : "";
    productCategoryIdInput.value = currentCategoryId;
    productNameInput.value = product ? product.productName || "" : "";
    productBriefInput.value = product ? product.productBrief || "" : "";
    productDescriptionInput.value = product ? product.productDescription || "" : "";
    productIsPopularCheckbox.checked = product ? !!product.isPopular : false;
    productIsNewCheckbox.checked = product ? !!product.isNew : false;
    productIsActiveCheckbox.checked = product ? product.active !== false : true;
    productImages = product && product.imageAddresses ? [...product.imageAddresses] : [];
    productImagesInput.value = "";
    renderProductImagesPreview();
    // بارگذاری محتوای محصول
    contentPartsData = (product && Array.isArray(product.contentParts)) ? [...product.contentParts] : [];
    renderContentPartsList();
    // بارگذاری گروه مشخصات
    specGroupsData = (product && Array.isArray(product.productSpecificationGroup)) ? [...product.productSpecificationGroup] : [];
    renderSpecGroupsList();
    // قیمت‌ها
    clearPriceCombinations();
    initializePriceTable();
    if (product && Array.isArray(product.priceLists)) {
    product.priceLists.forEach(pl => addPriceCombinationRowFromData(pl));
    }
    addProductModalLabel.textContent = product ? "ویرایش محصول" : "افزودن محصول";
    productModal.show();
    }
    productImagesInput.addEventListener('change', async () => {
    const files = Array.from(productImagesInput.files);
    if(!files.length) return;
    productImagesInput.disabled = true;
    for(const file of files){
    const url = await uploadFile(file);
    if(url){
    productImages.push(url);
    } else {
    alert('خطا در آپلود یک یا چند تصویر');
    }
    }
    renderProductImagesPreview();
    productImagesInput.value = "";
    productImagesInput.disabled = false;
    });
    function renderProductImagesPreview() {
    productImagePreviewList.innerHTML = "";
    if(!productImages || productImages.length === 0){
    productImagePreviewList.innerHTML = "<p>هیچ عکسی بارگذاری نشده است</p>";
    return;
    }
    productImages.forEach((imgUrl, idx) => {
    const container = document.createElement('div');
    container.className = 'image-container';
    const img = document.createElement('img');
    img.src = imgUrl;
    img.alt = "عکس محصول";
    img.className = "image-thumb";
    const btnRemove = document.createElement('button');
    btnRemove.type = "button";
    btnRemove.textContent = "×";
    btnRemove.title = "حذف عکس";
    btnRemove.onclick = () => {
    productImages.splice(idx, 1);
    renderProductImagesPreview();
    };
    container.appendChild(img);
    container.appendChild(btnRemove);
    productImagePreviewList.appendChild(container);
    });
    }
    // تابع آپلود فایل
    async function uploadFile(file){
    try{
    const formData = new FormData();
    formData.append('file', file);
    const res = await fetch('Upload', {
    method: "POST",
    headers: { 'Authorization': 'Bearer ' + token },
    body: formData
    });
    if(res.status === 401 || res.status === 403){
    redirectToLogin();
    return null;
    }
    if(!res.ok) throw new Error('خطا در آپلود فایل');
    let text = await res.text();
    text = text.trim().replace(/^"|"$/g, '');
    return text;
    }
    catch(err){
    console.error(err);
    return null;
    }
    }
    // ذخیره محصول با استفاده از داده‌های جدید داخلی
    productForm.addEventListener('submit', async e => {
    e.preventDefault();
    try {
    const id = productEditIdInput.value;
    const categoryId = productCategoryIdInput.value;
    const contentParts = contentPartsData;
    const productSpecificationGroup = await getSpecGroupsFromUIWithUpload();
    const priceLists = getPriceListsFromUI();
    const productObj = {
    productName: productNameInput.value.trim(),
    productBrief: productBriefInput.value.trim(),
    productDescription: productDescriptionInput.value.trim(),
    categoryID: categoryId,
    imageAddresses: productImages,
    isPopular: productIsPopularCheckbox.checked,
    isNew: productIsNewCheckbox.checked,
    active: productIsActiveCheckbox.checked,
    contentParts: contentParts,
    productSpecificationGroup: productSpecificationGroup.length > 0 ? productSpecificationGroup : specGroupsData,
    priceLists: priceLists
    };
    if(id && id !== "") productObj.id = id;
    else productObj.createdDate = new Date().toISOString();
    const url = id && id !== "" ? "EditProduct" : "AddProduct";
    const res = await fetch(url, {
    method: "POST",
    headers: {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
    },
    body: JSON.stringify(productObj)
    });
    if(res.status === 401 || res.status === 403){
    redirectToLogin();
    return;
    }
    if(!res.ok) throw new Error("خطا در ذخیره محصول");
    productModal.hide();
    await loadProducts(currentCategoryId);
    }
    catch(err){
    alert(err.message);
    }
    });
    async function deleteProduct(product){
    try {
    const res = await fetch("RemoveProduct", {
    method: "POST",
    headers: {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
    },
    body: JSON.stringify({id: product.id})
    });
    if (res.status === 401 || res.status === 403) {
    redirectToLogin();
    return;
    }
    if (!res.ok) throw new Error("خطا در حذف محصول");
    await loadProducts(currentCategoryId);
    }catch(err){
    alert(err.message);
    }
    }
    // ==== مدیریت قیمت دهی ترکیب مشخصات ====
    let priceCombinations = [];
    function initializePriceTable() {
    priceCombinations = [];
    priceTableHeader.innerHTML = "";
    priceTableBody.innerHTML = "";
    let groups = getCurrentSpecGroups();
    if(groups.length === 0){
    priceListContainer.style.display = 'none';
    return;
    } else {
    priceListContainer.style.display = 'block';
    }
    groups.forEach(g => {
    const th = document.createElement('th');
    th.textContent = g.title || "بدون عنوان";
    priceTableHeader.appendChild(th);
    });
    const thPrice = document.createElement('th');
    thPrice.textContent = "قیمت";
    priceTableHeader.appendChild(thPrice);
    const thRemove = document.createElement('th');
    thRemove.textContent = "حذف";
    priceTableHeader.appendChild(thRemove);
    updatePriceTableUI();
    }
    function getCurrentSpecGroups() {
    let groups = [];
    specGroupsData.forEach(g => {
    let specs = [];
    if(Array.isArray(g.productSpecifications)){
    g.productSpecifications.forEach(s => {
    if(s.specification) specs.push({specification: s.specification});
    });
    }
    if(g.title){
    groups.push({title: g.title, specs: specs});
    }
    });
    return groups;
    }
    function addPriceCombinationRow() {
    let groups = getCurrentSpecGroups();
    if(groups.length === 0){
    alert("لطفا حداقل یک گروه مشخصات و مشخصه اضافه کنید");
    return;
    }
    let priceRow = {
    id: generateUniqueId(),
    specs: [],
    price: ""
    };
    groups.forEach(g => {
    if(g.specs.length > 0)
    priceRow.specs.push(g.specs[0].specification);
    else
    priceRow.specs.push("");
    });
    priceCombinations.push(priceRow);
    updatePriceTableUI();
    }
    function addPriceCombinationRowFromData(priceList) {
    const groups = getCurrentSpecGroups();
    if (groups.length === 0) return;
    let row = {
    id: generateUniqueId(),
    specs: [],
    price: ""
    };
    const savedSpecs = Array.isArray(priceList.productSpecificationIds) ? priceList.productSpecificationIds : [];
    for (let i = 0; i < groups.length; i++) {
    let selectedSpec = "";
    if (typeof savedSpecs[i] !== "undefined" && savedSpecs[i] !== null) {
    let match = groups[i].specs.find(opt =>
    opt.specification && opt.specification.trim() === savedSpecs[i].trim()
    );
    selectedSpec = match ? match.specification : (groups[i].specs[0]?.specification || "");
    } else {
    selectedSpec = groups[i].specs[0]?.specification || "";
    }
    row.specs.push(selectedSpec);
    }
    if (Array.isArray(priceList.price) && priceList.price.length > 0) {
    const lastPriceObj = priceList.price[priceList.price.length - 1];
    if (lastPriceObj && typeof lastPriceObj.price !== "undefined") {
    row.price = lastPriceObj.price.toString();
    }
    }
    priceCombinations.push(row);
    updatePriceTableUI();
    }
    function updatePriceTableUI() {
    priceTableBody.innerHTML = "";
    let groups = getCurrentSpecGroups();
    priceCombinations.forEach((row, rowIndex) => {
    const tr = document.createElement('tr');
    row.specs.forEach((selectedSpec, i) => {
    const td = document.createElement('td');
    const select = document.createElement('select');
    select.classList.add('form-select', 'spec-select');
    let specs = groups[i]?.specs || [];
    specs.forEach(spec => {
    let option = document.createElement('option');
    option.value = spec.specification;
    option.textContent = spec.specification;
    if(spec.specification === selectedSpec) option.selected = true;
    select.appendChild(option);
    });
    select.addEventListener('change', () => {
    row.specs[i] = select.value;
    });
    td.appendChild(select);
    tr.appendChild(td);
    });
    const tdPrice = document.createElement('td');
    const priceInput = document.createElement('input');
    priceInput.type = 'text';
    priceInput.classList.add('form-control', 'form-control-sm');
    priceInput.value = (row.price !== undefined && row.price !== null) ? row.price.toString() : "";
    priceInput.addEventListener('input', () => {
    row.price = priceInput.value;
    });
    tdPrice.appendChild(priceInput);
    tr.appendChild(tdPrice);
    const tdRemove = document.createElement('td');
    const btnRemove = document.createElement('button');
    btnRemove.type = 'button';
    btnRemove.className = 'btn btn-sm btn-danger';
    btnRemove.textContent = '×';
    btnRemove.onclick = () => {
    priceCombinations.splice(rowIndex, 1);
    updatePriceTableUI();
    };
    tdRemove.appendChild(btnRemove);
    tr.appendChild(tdRemove);
    priceTableBody.appendChild(tr);
    });
    }
    function clearPriceCombinations() {
    priceCombinations = [];
    priceTableBody.innerHTML = "";
    priceTableHeader.innerHTML = "";
    }
    function getPriceListsFromUI() {
    let result = [];
    priceCombinations.forEach(row => {
    if(row.price === "" || isNaN(row.price)) return;
    result.push({
    ProductSpecificationIds: row.specs,
    Price: [{ PriceDate: new Date().toISOString(), Price: parseFloat(row.price) }]
    });
    });
    return result;
    }
    function generateUniqueId() {
    return 'id_' + Math.random().toString(36).substr(2, 9);
    }
    // توابع کمکی
    document.getElementById('btnAddRootCategory').addEventListener('click', () => openCategoryModal("", "0", ""));
    btnAddProduct.addEventListener('click', () => {
    if (currentCategoryId === "0" || !currentCategoryId) {
    alert("لطفا یک دسته را ابتدا انتخاب کنید");
    return;
    }
    openProductModal(null);
    });
    btnAddPriceCombination.addEventListener('click', () => addPriceCombinationRow());
    // بارگذاری اولیه
    window.addEventListener('DOMContentLoaded', async () => {
    await loadCategories("0");
    if(currentCategoryId && currentCategoryId !== "0"){
    await loadCategories(currentCategoryId);
    await loadProducts(currentCategoryId);
    btnAddProduct.disabled = false;
    const titleFound = findCategoryTitle(currentCategoryId);
    if(titleFound) selectedCategoryTitleElem.textContent = titleFound;
    } else {
    selectedCategoryTitleElem.textContent = "هیچ دسته انتخاب نشده";
    btnAddProduct.disabled = true;
    }
    });
    function findCategoryTitle(catId){
    for(const parentId in categoriesCache){
    const cats = categoriesCache[parentId];
    const foundCat = cats.find(c => c.id === catId);
    if(foundCat) return foundCat.title;
    }
    return null;
    }
    // تابع دریافت گروه مشخصات محصول به همراه آپلود جدید (ولی چون آپلود در مدال جداست، همین داده‌ها بازگردانده می‌شود)
    async function getSpecGroupsFromUIWithUpload() {
    if(specGroupsData.length === 0) return [];
    const groups = [];
    for(let i=0; i<specGroupsData.length; i++) {
    const group = specGroupsData[i];
    let title = group.title || "";
    let description = group.description || "";
    let imageAddress = group.imageAddress || "";
    let productSpecifications = [];
    if(Array.isArray(group.productSpecifications)){
    for(let spec of group.productSpecifications){
    let specification = spec.specification || "";
    let imageAddressSpec = spec.imageAddress || "";
    if(specification){
    productSpecifications.push({
    ID: "",
    specification,
    imageAddress: imageAddressSpec || undefined
    });
    }
    }
    }
    if(title || description || productSpecifications.length > 0){
    groups.push({title, description: description || undefined, imageAddress: imageAddress || undefined, productSpecifications});
    }
    }
    return groups;
    }
</script>